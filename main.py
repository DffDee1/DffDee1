import logging
from config import *
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils.executor import start_webhook
from db import *
from soupbruh import *
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from utils import *
import os
import psycopg2
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from psycopg2 import Error

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

DATABASE_URL = os.environ['DATABASE_URL']
conn = psycopg2.connect(DATABASE_URL, sslmode='require')
curs = conn.cursor()

try:
    create_table_query = '''
    CREATE TABLE users (
    chat_id serial NOT NULL PRIMARY KEY,
    name VARCHAR (100) NOT NULL,
    pair VARCHAR (100) NOT NULL
    );'''
    curs.execute(create_table_query)
    conn.commit()

except (Exception, Error) as error:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL 1", error)




async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)


async def on_shutdown(dispatcher):
    await bot.delete_webhook()


async def save(message):
    try:
        insert_query = """ INSERT INTO item (chat_id, name, pair)
                                      VALUES (%s, %s, %s)"""
        item_tuple = (1, message.chat.id, message.text)
        curs.execute(insert_query, item_tuple)
        conn.commit()
    except (Exception, Error) as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL 2", error)


# async def read(user_id):
#     messages = await database.fetch_all('SELECT text '
#                                         'FROM messages '
#                                         'WHERE telegram_id = :telegram_id ',
#                                         values={'telegram_id': user_id})
#     return messages


async def read(user_id):
    curs.execute(f"SELECT pair from users where chat_id = {user_id}")
    res = curs.fetchone()
    return res


async def menu(message):
    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in
                   ['–ì–æ—Å. –≤–∞–ª—é—Ç—ã', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 'üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']])
    await bot.send_message(message.chat.id,
                           text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é)",
                           reply_markup=keyboard)
    await state.set_state(TestStates.all()[1])


async def menu_add():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menus = types.KeyboardButton("üè†–ú–µ–Ω—é")
    keyboard.add(menus)
    return keyboard


@dp.message_handler()
async def start(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)

    keyboard.add(*[types.KeyboardButton(name) for name in
                   ['–ì–æ—Å. –≤–∞–ª—é—Ç—ã', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 'üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']])
    text = '–ü—Ä–∏–≤–µ—Ç, {}! –Ø —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –æ–±–º–µ–Ω–Ω–∏–∫–∏!\n' \
           '–¢—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏!' \
        .format(message.from_user.first_name)

    with open('commands.png', 'rb') as photo:
        await bot.send_photo(message.from_user.id,
                             photo,
                             caption=text,
                             reply_markup=keyboard)
        await state.set_state(TestStates.all()[1])


@dp.message_handler(state=TestStates.TEST_STATE_1)                                                        # FIRST CHOICE
async def first_test_state_case_met(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if message.text == '–ì–æ—Å. –≤–∞–ª—é—Ç—ã':
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['–£–∫–∞–∑–∞—Ç—å –≤–∞–ª—é—Ç—É', '–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É', 'üè†–ú–µ–Ω—é']])
        await state.set_state(TestStates.all()[0])
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!',
                            reply=False,
                            reply_markup=keyboard)

    elif message.text == '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã':
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['‚å®–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø–∞—Ä—É', 'üìä–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã', 'üè†–ú–µ–Ω—é']])
        await state.set_state(TestStates.all()[2])
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç',
                            reply=False,
                            reply_markup=keyboard)

    elif message.text == 'üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['üîî–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É', 'üîï–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É', '–ú–æ–∏ –ø–∞—Ä—ã', 'üè†–ú–µ–Ω—é']])
        await state.set_state(TestStates.all()[4])
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç',
                            reply=False,
                            reply_markup=keyboard)


@dp.message_handler(state=TestStates.TEST_STATE_2)                                                              # CRYPTO
async def second_test_state_case_met(message: types.Message):
    if message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)
        return None

    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if message.text == '‚å®–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø–∞—Ä—É':
        keyboard = await menu_add()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "coin/coin"'
                            '\n–ù–∞–ø—Ä–∏–º–µ—Ä "btc/rub" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫!',
                            reply=False,
                            reply_markup=keyboard)
        await state.set_state(TestStates.all()[9])

    elif message.text == 'üìä–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã':
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['üá∑üá∫RUB', 'üá∫üá∏USDT', 'üåêBTC', 'üè†–ú–µ–Ω—é']])
        await state.set_state(TestStates.all()[3])
        await message.reply('–ü–∞—Ä—ã –∫ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å?',
                            reply=False,
                            reply_markup=keyboard)

    else:
        await message.reply('–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.',
                            reply=False)


@dp.message_handler(state=TestStates.TEST_STATE_3)                                                       # CRYPTO CHOICE
async def second_test_state_case_met(message: types.Message):
    if message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)
        return None

    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if message.text == 'üá∑üá∫RUB':
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['BTC/RUB', 'ETH/RUB', 'BNB/RUB', 'USDT/RUB', 'üè†–ú–µ–Ω—é']])
        await bot.send_message(message.chat.id,
                               text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É",
                               reply_markup=keyboard)

    elif message.text == 'üá∫üá∏USDT':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'XRP/USDT', 'üè†–ú–µ–Ω—é']])
        await bot.send_message(message.chat.id,
                               text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É",
                               reply_markup=keyboard)

    elif message.text == 'üåêBTC':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['ETH/BTC', 'BNB/BTC', 'XRP/BTC', 'üè†–ú–µ–Ω—é']])
        await bot.send_message(message.chat.id,
                               text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É",
                               reply_markup=keyboard)

    else:
        await bot.send_message(message.chat.id,
                               text="–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.")
        return None

    await state.set_state(TestStates.all()[9])


@dp.message_handler(state=TestStates.TEST_STATE_4)                                                               # NOTIF
async def second_test_state_case_met(message: types.Message):
    if message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)
        return None

    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if message.text == 'üîî–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É':
        keyboard = await menu_add()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–ª–∏—Ç–Ω–æ –ø–∞—Ä—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n'
                            '–ù–∞–ø—Ä–∏–º–µ—Ä, "btcrub" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.',
                            reply=False,
                            reply_markup=keyboard)
        await state.set_state(TestStates.all()[5])

    elif message.text == 'üîï–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É':
        # keyboard.add(*[types.KeyboardButton(name) for name in
        #                ['üá∑üá∫RUB', 'üá∫üá∏USDT', 'üåêBTC', 'üè†–ú–µ–Ω—é']])
        # await state.set_state(TestStates.all()[3])
        await message.reply('wait plz',
                            reply=False,
                            reply_markup=keyboard)

    elif message.text == '–ú–æ–∏ –ø–∞—Ä—ã':
        aboba = await read(message.chat.id)
        await message.reply(aboba,
                            reply=False)

    else:
        await message.reply('–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.',
                            reply=False)


@dp.message_handler(state=TestStates.TEST_STATE_5)                                                           # NOTIF ADD
async def second_test_state_case_met(message: types.Message):
    if message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)
        return None

    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if check_pair(message.text):
        await save(message)
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç\n'
                            '–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ (–≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç) –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n',
                            reply=False,
                            reply_markup=keyboard)
        await state.set_state(TestStates.all()[1])

    elif message.text == 'üîï–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É':
        pass

    else:
        await message.reply('–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.',
                            reply=False)


# @dp.message_handler(state=TestStates.TEST_STATE_6)                                                       # NOTIF PERCENT
# async def second_test_state_case_met(message: types.Message):
#     if message.text == 'üè†–ú–µ–Ω—é':
#         await menu(message)
#         return None
#
#     state = dp.current_state(user=message.from_user.id)
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#
#     try:
#         if int(message.text) > 1:
#
#
#     except ValueError:
#         await message.reply('–ü–∞—Ä—ã –∫ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å?', reply=False)
#
#
#     else:
#         await message.reply('–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.',
#                             reply=False)


@dp.message_handler(state=TestStates.TEST_STATE_7)
async def second_test_state_case_met(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    await message.reply('7!', reply=False)


@dp.message_handler(state=TestStates.TEST_STATE_8)
async def second_test_state_case_met(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    await message.reply('8!', reply=False)


@dp.message_handler(state=TestStates.TEST_STATE_9)     # SOLO FUNC
async def second_test_state_case_met(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    if '/' in message.text[1:]:
        str1 = message.text.upper()
        str1 = str1.split('/')
        price = await get_price_of_pair(str1[0] + str1[1])
        await bot.send_message(message.chat.id,
                               await print_price(price))

    elif 'pair' in message.text[:5]:
        price = await get_price_of_pair(message.text[5:].upper())
        await bot.send_message(message.chat.id,
                               await print_price(price))

    elif '+' in message.text:
        await bot.send_message(message.chat.id, await plus_func(message))

    elif message.text[0].isdigit():
        await bot.send_message(message.chat.id, await get_price_usdt(message))

    elif message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['–ì–æ—Å. –≤–∞–ª—é—Ç—ã', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']])
        await bot.send_message(message.chat.id,
                               '–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏!', reply_markup=keyboard)
        await state.set_state(TestStates.all()[1])


@dp.message_handler(state=TestStates.TEST_STATE_0)                                                                 # GOS
async def first_test_state_case_met(message: types.Message):
    await menu(message)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
