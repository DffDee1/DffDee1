import psycopg2
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.utils.executor import start_webhook
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from psycopg2 import Error
from telegram import ParseMode
from config import *
from soupbruh import *
from utils import *

scheduler = AsyncIOScheduler()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

DATABASE_URL = os.environ['DATABASE_URL']
conn = psycopg2.connect(DATABASE_URL, sslmode='require')
curs = conn.cursor()


try:
    create_table_query = '''
                CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                chat_id BIGINT NOT NULL,
                pair_name VARCHAR (100) NOT NULL UNIQUE,
                old_price REAL NOT NULL,
                amount REAL NOT NULL
                );'''
    curs.execute(create_table_query)
    conn.commit()

except (Exception, Error) as error:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL 1", error)
    curs.execute("rollback")

    create_table_query = '''
                    CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    chat_id BIGINT NOT NULL,
                    pair_name VARCHAR (100) NOT NULL,
                    old_price REAL NOT NULL,
                    amount REAL NOT NULL
                    );'''
    curs.execute(create_table_query)
    conn.commit()


async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)


async def on_shutdown(dispatcher):
    await bot.delete_webhook()


async def view_portf(message):
    try:
        curs.execute(f"SELECT * from users where chat_id = {message.chat.id}")
        checks = curs.fetchall()

    except (Exception, Error) as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL 3", error)
        curs.execute("rollback")

        curs.execute(f"SELECT * from users where chat_id = {message.chat.id}")
        checks = curs.fetchall()
    if len(checks) < 1:
        return '–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã!\n' \
               '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å!'
    text = ''
    price_of_all = 0
    for i in checks:
        price = await get_price_of_pair(i[2] + 'USDT')
        price = float(price['price'])
        percent = round((i[3] - price) / price * 100, 2)
        text += f'*{i[2]}* –≤ –∫–æ–ª-–≤–µ _{i[4]}_: *{round(price * i[4], 2)}*$ ({"+" if percent > 0 else ""}{percent}%)\n'
        price_of_all += price * i[4]
    text += f'------------------------------\n' \
            f'–û–±—â–∞—è —Å—É–º–º–∞ –∞–∫—Ç–∏–≤–æ–≤ = {round(price_of_all, 2)}$'
    return text


async def check_pair_in_db(message):
    try:
        curs.execute(f"SELECT pair_name from users where chat_id = {message.chat.id}")
        checks = curs.fetchall()

    except (Exception, Error) as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL 3", error)
        curs.execute("rollback")

        curs.execute(f"SELECT pair_name from users where chat_id = {message.chat.id}")
        checks = curs.fetchall()

    for i in checks:
        if message.text in i:
            return True

    return False


async def check_new_pair(message):

    try:
        curs.execute(f"SELECT pair_name from users where chat_id = {message.chat.id}")
        checks = curs.fetchall()

    except (Exception, Error) as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL 3", error)
        curs.execute("rollback")

        curs.execute(f"SELECT pair_name from users where chat_id = {message.chat.id}")
        checks = curs.fetchall()

    for i in checks:
        if message.text in i:
            return False

    return True


async def save(message):

    try:
        insert_query = """ 
        INSERT INTO users (chat_id, pair_name, old_price, amount)
        VALUES (%s, %s, %s, %s)
        """

        old_p = await get_price_of_pair(message.text.upper() + 'USDT')

        item_tuple = (message.chat.id, message.text.upper(), str(round(float(old_p['price']), 3)), 12345)
        curs.execute(insert_query, item_tuple)
        conn.commit()

    except (Exception, Error) as error:

        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL 2", error)
        curs.execute("rollback")

        insert_query = """ 
        INSERT INTO users (chat_id, pair_name, old_price, amount) 
        VALUES (%s, %s, %s, %s)
        """

        old_p = await get_price_of_pair(message.text.upper() + 'USDT')

        item_tuple = (message.chat.id, message.text.upper(), str(round(float(old_p['price']), 3)), 12345)
        curs.execute(insert_query, item_tuple)
        conn.commit()


async def read(message):
    try:
        curs.execute(f"SELECT pair_name from users where chat_id = {message.chat.id}")
        checks = curs.fetchall()

    except (Exception, Error) as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL 3", error)
        curs.execute("rollback")

        curs.execute(f"SELECT pair_name from users where chat_id = {message.chat.id}")
        checks = curs.fetchall()
    return checks


async def delete(message):

    try:
        curs.execute(f"DELETE FROM users "
                     f"WHERE chat_id = {message.chat.id} AND pair_name = '{message.text}';")
        conn.commit()

    except (Exception, Error) as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL 3", error)
        curs.execute("rollback")

        curs.execute(f"DELETE FROM users "
                     f"WHERE chat_id = {message.chat.id} AND pair_name = '{message.text}';")
        conn.commit()


async def menu(message):
    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(name) for name in
                   ['–ì–æ—Å. –≤–∞–ª—é—Ç—ã', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 'üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å']])
    await bot.send_message(message.chat.id,
                           text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é)",
                           reply_markup=keyboard)
    await state.set_state(TestStates.all()[1])


async def menu_add():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menus = types.KeyboardButton("üè†–ú–µ–Ω—é")
    keyboard.add(menus)
    return keyboard


@dp.message_handler()
async def start(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)

    keyboard.add(*[types.KeyboardButton(name) for name in
                   ['–ì–æ—Å. –≤–∞–ª—é—Ç—ã', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 'üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å']])
    text = '–ü—Ä–∏–≤–µ—Ç, {}! –Ø —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –æ–±–º–µ–Ω–Ω–∏–∫–∏!\n' \
           '–¢—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏!' \
        .format(message.from_user.first_name)

    with open('commands.png', 'rb') as photo:
        await bot.send_photo(message.from_user.id,
                             photo,
                             caption=text,
                             reply_markup=keyboard)
        await state.set_state(TestStates.all()[1])


@dp.message_handler(state=TestStates.TEST_STATE_1)                                                        # FIRST CHOICE
async def first_test_state_case_met(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if message.text == '–ì–æ—Å. –≤–∞–ª—é—Ç—ã':
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['–£–∫–∞–∑–∞—Ç—å –≤–∞–ª—é—Ç—É', '–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É', 'üè†–ú–µ–Ω—é']])
        await state.set_state(TestStates.all()[0])
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!',
                            reply=False,
                            reply_markup=keyboard)

    elif message.text == '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã':
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['‚å®–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø–∞—Ä—É', 'üìä–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã', 'üè†–ú–µ–Ω—é']])
        await state.set_state(TestStates.all()[2])
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç',
                            reply=False,
                            reply_markup=keyboard)

    elif message.text == 'üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å':
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É', '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É', '–ú–æ–∏ –ø–∞—Ä—ã', 'üè†–ú–µ–Ω—é']])
        await state.set_state(TestStates.all()[4])
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç' + str(message.chat.id)
        await message.reply(text,
                            reply=False,
                            reply_markup=keyboard)

    else:
        await message.reply('–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏!',
                            reply=False)


@dp.message_handler(state=TestStates.TEST_STATE_2)                                                              # CRYPTO
async def second_test_state_case_met(message: types.Message):
    if message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)
        return None

    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if message.text == '‚å®–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø–∞—Ä—É':
        keyboard = await menu_add()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "coin/coin"'
                            '\n–ù–∞–ø—Ä–∏–º–µ—Ä "btc/rub" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫!',
                            reply=False,
                            reply_markup=keyboard)
        await state.set_state(TestStates.all()[9])

    elif message.text == 'üìä–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã':
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['üá∑üá∫RUB', 'üá∫üá∏USDT', 'üåêBTC', 'üè†–ú–µ–Ω—é']])
        await state.set_state(TestStates.all()[3])
        await message.reply('–ü–∞—Ä—ã –∫ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å?',
                            reply=False,
                            reply_markup=keyboard)

    else:
        await message.reply('–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏!',
                            reply=False)


@dp.message_handler(state=TestStates.TEST_STATE_3)                                                       # CRYPTO CHOICE
async def second_test_state_case_met(message: types.Message):
    if message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)
        return None

    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if message.text == 'üá∑üá∫RUB':
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['BTC/RUB', 'ETH/RUB', 'BNB/RUB', 'USDT/RUB', 'üè†–ú–µ–Ω—é']])
        await bot.send_message(message.chat.id,
                               text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É",
                               reply_markup=keyboard)

    elif message.text == 'üá∫üá∏USDT':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'XRP/USDT', 'üè†–ú–µ–Ω—é']])
        await bot.send_message(message.chat.id,
                               text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É",
                               reply_markup=keyboard)

    elif message.text == 'üåêBTC':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['ETH/BTC', 'BNB/BTC', 'XRP/BTC', 'üè†–ú–µ–Ω—é']])
        await bot.send_message(message.chat.id,
                               text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É",
                               reply_markup=keyboard)

    else:
        await bot.send_message(message.chat.id,
                               text="–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –≤–Ω–æ–ø–∫–∞–º–∏!")
        return None

    await state.set_state(TestStates.all()[9])


@dp.message_handler(state=TestStates.TEST_STATE_4)                                                               # PORTF
async def second_test_state_case_met(message: types.Message):
    if message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)
        return None

    state = dp.current_state(user=message.from_user.id)

    if message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É':
        keyboard = await menu_add()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å.\n'
                            '–ù–∞–ø—Ä–∏–º–µ—Ä, "btc" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.',
                            reply=False,
                            reply_markup=keyboard)
        await state.set_state(TestStates.all()[5])

    elif message.text == '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É':
        try:
            curs.execute(f"SELECT pair_name from users where chat_id = {message.chat.id}")
            checks = curs.fetchall()

        except (Exception, Error) as error:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL 3", error)
            curs.execute("rollback")

            curs.execute(f"SELECT pair_name from users where chat_id = {message.chat.id}")
            checks = curs.fetchall()

        if len(checks) < 1:
            text = '–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã!\n' \
                   '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å!'
            keyboard = None

        else:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            text = '–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n'
            j = 1
            for i in checks:
                text += f'{str(j)}: *{i[0]}*\n'
                keyboard.add(*[types.KeyboardButton(name) for name in
                               [f'{i[0]}']])
                j += 1
            text +='\n–ö–∞–∫—É—é –º–æ–Ω–µ—Ç—É —É–¥–∞–ª–∏—Ç—å?'
            await state.set_state(TestStates.all()[7])

        await bot.send_message(message.chat.id,
                               text,
                               reply_markup=keyboard,
                               parse_mode=ParseMode.MARKDOWN)

    elif message.text == '–ú–æ–∏ –ø–∞—Ä—ã':
        text = await view_portf(message)
        await message.reply(text,
                            reply=False,
                            parse_mode=ParseMode.MARKDOWN)

    else:
        await message.reply('–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏!',
                            reply=False)


@dp.message_handler(state=TestStates.TEST_STATE_5)                                                           # PORTF ADD
async def second_test_state_case_met(message: types.Message):
    if message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)
        return None

    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if await check_pair(message.text.upper() + 'USDT'):

        if await check_new_pair(message):
            await save(message)
            await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç',
                                reply=False,
                                reply_markup=keyboard)
            await state.set_state(TestStates.all()[6])

        else:
            await message.reply('–≠—Ç–∞ –ø–∞—Ä–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–º–∏, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é!\n',
                                reply=False,
                                reply_markup=keyboard)

    else:
        await message.reply('–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–Ω–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è!\n'
                            '–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä "btc", –ø–∏—Å–∞—Ç—å –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.',
                            reply=False)


@dp.message_handler(state=TestStates.TEST_STATE_6)                                                        # PORTF AMOUNT
async def second_test_state_case_met(message: types.Message):
    if message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)
        return None

    state = dp.current_state(user=message.from_user.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    try:
        if float(message.text) > 0:
            try:
                insert_query = f"UPDATE users SET amount = {float(message.text)} WHERE amount = '12345'"
                curs.execute(insert_query)
                conn.commit()

            except (Exception, Error) as error:

                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å PostgreSQL 4", error)
                curs.execute("rollback")

                insert_query = f"UPDATE users SET amount = {int(message.text)} WHERE amount = '12345'"
                curs.execute(insert_query)
                conn.commit()
            keyboard.add(*[types.KeyboardButton(name) for name in
                           ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É', '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É', '–ú–æ–∏ –ø–∞—Ä—ã', 'üè†–ú–µ–Ω—é']])
            await state.set_state(TestStates.all()[4])
            text = '—É—Ä–∞\n' \
                   '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç' + str(message.chat.id)
            await message.reply(text,
                                reply=False,
                                reply_markup=keyboard)
            return None

    except ValueError:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ\n'
                            '–ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ —Ü–µ–ª–æ–µ, –≤–≤–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É.\n'
                            '–ù–∞–ø—Ä–∏–º–µ—Ä, "0.02" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫!',
                            reply=False)

    else:
        await message.reply('–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.',
                            reply=False)


@dp.message_handler(state=TestStates.TEST_STATE_7)                                                        # PORTF DELETE
async def second_test_state_case_met(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    if message.text.isdigit():
        await bot.send_message(message.chat.id,
                               '–í–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω–æ –Ω–µ —Ü–∏—Ñ—Ä—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!')
        return None
    
    elif check_pair_in_db(message):

        try:
            await delete(message)
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(*[types.KeyboardButton(name) for name in
                           ['–ì–æ—Å. –≤–∞–ª—é—Ç—ã', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 'üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å']])
            await bot.send_message(message.chat.id,
                                   f'–ü–∞—Ä–∞ {message.text.upper()} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é!\n\n'
                                   f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.',
                                   reply_markup=keyboard)
            await state.set_state(TestStates.all()[1])

        except:
            await bot.send_message(message.chat.id,
                                   '–í—ã–±—Ä–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞—Ä–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!')

    else:
        await bot.send_message(message.chat.id,
                               '–í—ã–±—Ä–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞—Ä–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!')


# @dp.message_handler(state=TestStates.TEST_STATE_8)
# async def second_test_state_case_met(message: types.Message):
#     state = dp.current_state(user=message.from_user.id)
#     await message.reply('8!', reply=False)


@dp.message_handler(state=TestStates.TEST_STATE_9)                                                           # SOLO FUNC
async def second_test_state_case_met(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    if '/' in message.text[1:]:
        str1 = message.text.upper()
        str1 = str1.split('/')
        pair = str1[0] + str1[1]
        if check_pair(pair):
            price = await get_price_of_pair(pair)
            await bot.send_message(message.chat.id,
                                   await print_price(price))
        else:
            await bot.send_message(message.chat.id,
                                   '_–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è!_',
                                   parse_mode=ParseMode.MARKDOWN)

    elif '+' in message.text:
        await bot.send_message(message.chat.id, await plus_func(message))

    elif message.text[0].isdigit() and len(message.text[1]) > 1:
        await bot.send_message(message.chat.id, await get_price_usdt(message))

    elif message.text == 'üè†–ú–µ–Ω—é':
        await menu(message)

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*[types.KeyboardButton(name) for name in
                       ['–ì–æ—Å. –≤–∞–ª—é—Ç—ã', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 'üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å']])
        await bot.send_message(message.chat.id,
                               '–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.\n',
                               reply_markup=keyboard)
        await state.set_state(TestStates.all()[1])


@dp.message_handler(state=TestStates.TEST_STATE_0)                                                                 # GOS
async def first_test_state_case_met(message: types.Message):
    await menu(message)


if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
